# vim: ft=yaml.ansible
---
- name: Check if partitions exists
  ansible.builtin.stat:
    path: /dev/disk/by-partlabel/{{ item }}
  loop:
    - '{{ archlinux_setup_partlabels.boot }}'
    - '{{ archlinux_setup_partlabels.root }}'
  register: part_stat

- name: Create partitions
  become: true
  ansible.builtin.command:
    cmd: sfdisk {{ archlinux_setup_disk_boot }} --wipe-partitions always
    stdin: |-
      label: gpt
      size=512M, type=U, name={{ archlinux_setup_partlabels.boot }}
      size=+, type=4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709, name={{ archlinux_setup_partlabels.root }}
    creates: # too complicated
  when: part_stat.results | rejectattr('stat.exists') | list

- name: Create boot filesystem
  become: true
  community.general.filesystem:
    dev: /dev/disk/by-partlabel/{{ archlinux_setup_partlabels.boot }}
    fstype: vfat
    opts: -F 32
    state: present

- name: Create root filesystem
  become: true
  community.general.filesystem:
    dev: /dev/disk/by-partlabel/{{ archlinux_setup_partlabels.root }}
    fstype: btrfs
    state: present

- name: Create BTRFS subvolumes
  become: true
  community.general.btrfs_subvolume:
    filesystem_device: /dev/disk/by-partlabel/{{ archlinux_setup_partlabels.root }}
    name: '{{ item.name }}'
    state: present
    automount: true
  loop: '{{ archlinux_setup_subvolumes }}'

- name: Mount root filesystem
  become: true
  ansible.posix.mount:
    src: /dev/disk/by-partlabel/{{ archlinux_setup_partlabels.root }}
    path: /mnt{{ item.path }}
    fstype: btrfs
    opts: subvol={{ item.name }}
    fstab: /tmp/fake-fstab
    state: mounted
  loop: '{{ archlinux_setup_subvolumes }}'

- name: Mount boot filesystem
  become: true
  ansible.posix.mount:
    src: /dev/disk/by-partlabel/{{ archlinux_setup_partlabels.boot }}
    path: /mnt/boot/
    fstype: vfat
    fstab: /tmp/fake-fstab
    state: mounted
