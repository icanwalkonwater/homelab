# vim: ft=yaml.ansible
---
- name: Get device info
  community.general.parted:
    device: '{{ disk_setup_dev }}'
    unit: MiB
  register: dev_info

- name: Make sure the device is empty
  ansible.builtin.assert:
    msg: Partitions already exists on the disk, if this is intentional, use disk_setup_override_partitions
    that:
      - dev_info.partitions | length == 0
    quiet: true
  when: not disk_setup_override_partitions

- name: Partition disk
  ansible.builtin.command:
    cmd: sfdisk {{ disk_setup_dev }} --wipe-partitions always
    stdin: '{{ disk_setup_partitions_spec }}'
    creates: # too complicated

- name: Create filesystems
  community.general.filesystem:
    dev: '{{ item.dev }}'
    fstype: '{{ item.type }}'
    opts: '{{ item["opts"] or "" }}'
  loop: '{{ disk_setup_filesystems }}'
  loop_control:
    label: '{{ item.dev }} as {{ item.type }}'

- name: Create filesystems mountpoints
  ansible.builtin.file:
    name: '{{ disk_setup_mountpoint_prefix }}{{ item.mountpoint }}'
    state: directory
    mode: '0755'
  loop: '{{ disk_setup_filesystems | selectattr("mountpoint", "defined") }}'
  loop_control:
    label: '{{ item.mountpoint }}'

# Create and mount btrfs subvolumes before mounting other filesystems because they are probably inside a subvolume

- name: Create btrfs subvolumes
  ansible.builtin.include_tasks:
    file: btrfs_subvols.yml
  loop: '{{ disk_setup_btrfs_subvolumes }}'
  loop_control:
    label: '{{ item.dev }}'

- name: Mount filesystems
  ansible.posix.mount:
    src: '{{ item.dev }}'
    path: '{{ disk_setup_mountpoint_prefix }}{{ item.mountpoint }}'
    fstype: '{{ item.type }}'
    state: ephemeral
  loop: '{{ disk_setup_filesystems | selectattr("mountpoint", "defined") }}'
  loop_control:
    label: '{{ item.dev }} on {{ item.mountpoint }}'

